---
- name: Install a simple dev/test site on our dev servers only
  hosts: all
  become: true

  vars_files:
    - vars.yml

  # TODO: Pre-tasks to create directories for letsencrypt, etc. and set permissions

  tasks:

    - name: Create siteroot folders
      ansible.builtin.file:
        path: "{{ item.siteroot }}"
        state: directory
        mode: '0755'
        owner: "{{ item.siteroot_owner }}"
        group: "{{ item.siteroot_group }}"
      loop: "{{ websites }}"
      when: item.siteroot is defined

    - name: Create docroot folders
      ansible.builtin.file:
        path: "{{ item.docroot }}"
        state: directory
        mode: '0755'
        owner: "{{ item.docroot_owner | default(default_docroot_owner) }}"
        group: "{{ item.siteroot_group | default(default_docroot_group) }}"
      loop: "{{ websites }}"

    - name: Create corresponding well-known directory with acme-challenge subdirectory
      ansible.builtin.file:
        path: "{{ acme_well_known_dir }}/{{ item.server_name }}/acme-challenge"
        state: directory
        mode: '0755'
        owner: root
        group: root
      loop: "{{ websites }}"

    - name: Template standard security.txt to well-known directory
      ansible.builtin.template:
        src: security.txt.j2
        dest: "{{ acme_well_known_dir }}/{{ item.server_name }}/security.txt"
        owner: root
        group: root
        mode: '0644'
      loop: "{{ websites }}"

# TODO: Add a default site
    # - name: Install default site index
    #   ansible.builtin.template:
    #     src: index.html.j2
    #     dest: "{{ dev_site_path }}/index.html"
    #     owner: root
    #     group: root
    #     mode: '0644'

    # - name: Install default site http configuration
    #   ansible.builtin.template:
    #     src: "dev.conf.j2"
    #     dest: "{{ apache_server_root }}/sites-available/{{ dev_conf_name }}"
    #     owner: root
    #     group: root
    #     mode: '0644'
    #   notify: Reload apache

    - name: Install straight http configurations for all sites
      ansible.builtin.template:
        src: http-site.conf.j2
        dest: "{{ apache_server_root }}/sites-available/{{ site.server_name }}.conf"
        owner: root
        group: root
        mode: '0644'
      loop: "{{ websites }}"
      loop_control:
        loop_var: site
      notify: Reload apache

    - name: Install https configurations for all sites
      ansible.builtin.template:
        src: "https-site.conf.j2"
        dest: "{{ apache_server_root }}/sites-available/{{ site.server_name }}-ssl.conf"
        owner: root
        group: root
        mode: '0644'
      loop: "{{ websites }}"
      loop_control:
        loop_var: site
      notify: Reload apache

    # TODO: Disable dev site (http and https) if not in production

    # We'll need the http site up and running before we can pass an ACME challenge.
    - name: Enable http sites
      ansible.builtin.command: a2ensite {{ item.server_name }}
      loop: "{{ websites }}"
      notify: Reload apache
      register: site_result
      changed_when: "'Enabling site' in site_result.stdout"

    # BEFORE we enable the ssl site we've got to provide a self-signed certificate
    # if no SSL certificate is present yet. Later if necessary we can regenerate
    # the certificate with a real one from Let's Encrypt.

    # For this initial key we'll only create it if there's no key certificate of any
    # kind yet.
    - name: Check if any kind of certificate exists
      ansible.builtin.stat:
        path: "{{ acme_certs_dir }}/{{ item.server_name }}.crt"
      register: cert_paths
      loop: "{{ websites }}"

    # - name: Get certificate information
    #   when: cert_path.stat.exists
    #   community.crypto.x509_certificate_info:
    #     path: "{{ dev_cert_path }}"
    #   register: cert_info

    - name: Print existing certificate information
      ansible.builtin.debug:
        var: cert_paths.results

    - name: Create private key for a self-signed certificate (RSA, 4096 bits)
      loop: "{{ cert_paths.results }}"
      when: "not item.stat.exists"
      notify: Reload apache
      community.crypto.openssl_privatekey:
        path: "{{ acme_keys_dir }}/{{ item.item.server_name }}.key"
        regenerate: never
        type: RSA

    - name: Create CSR for simple self-signed certificate
      loop: "{{ cert_paths.results }}"
      when: "not item.stat.exists"
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ acme_keys_dir }}/{{ item.item.server_name }}.key"
        common_name: "{{ item.item.server_name }}"
        subject_alt_name: "{{ ([item.item.server_name] + (item.item.aliases | default([]))) | map('regex_replace', '^', 'DNS:') | list }}"
        authority_cert_issuer:
          - "{{ self_signed_ca_DNS }}"
        authority_cert_serial_number: 123
      register: csrs

    - name: Print CSRs
      ansible.builtin.debug:
        var: csrs.results

    - name: Create simple self-signed certificates
      loop: "{{ csrs.results }}"
      community.crypto.x509_certificate:
        path: "{{ acme_certs_dir }}/{{ item.item.item.server_name }}.crt"
        csr_content: "{{ item.csr }}"
        privatekey_path: "{{ acme_keys_dir }}/{{ item.item.item.server_name }}.key"
        provider: selfsigned
      when: item.csr is defined
      notify: Reload apache

    - name: Enable default-ssl site
      loop: "{{ websites }}"
      ansible.builtin.command: "a2ensite {{ item.server_name }}-ssl"
      register: site_result
      notify: Reload apache
      changed_when: "'Enabling site' in site_result.stdout"

    # At this point we should be able to get our site up and running enough to
    # pass an ACME challenge, so run handlers to reload apache and get the site
    # up and running.
    - name: Flush handlers
      ansible.builtin.meta: flush_handlers

    # - name: Install Letsencrypt certificate
    #   ansible.builtin.import_tasks: acme.yml
    #   when: use_letsencrypt

  handlers:

    - name: Reload apache
      ansible.builtin.service:
        name: apache2
        state: reloaded
