{{ ansible_managed | comment }}
<IfModule mod_ssl.c>
	<VirtualHost _default_:443>

		ServerName {{ site.server_name }}
		{% if site.aliases is defined %}
		ServerAlias {{ site.aliases | join(' ') }}
		{% endif %}

		ServerAdmin {{ admin_email }}

		# Protect against iframe clickjacking
		# Older, for backward compatibility
		Header set X-Frame-Options "SAMEORIGIN"
		# Newer, for modern browsers
		Header set Content-Security-Policy "frame-ancestors 'self';"

		# We manage our well_known directories somewhat globally. It's useful if
		# they're stored outside the main document root. For example, if I want
		# to generate an acme challenge file, I can do so without worrying about
		# whether a file lying around created by root or some other privileged
		# user will prevent e.g. a capistrano-style deployment by the web app
		# owner from working, as it won't be sitting under the main document
		# root.
		Alias "/.well-known" "{{ acme_well_known_dir }}/{{ site.server_name}}/.well-known"

		<Directory "{{ acme_well_known_dir }}/{{ site.server_name}}">
			Options -Indexes +FollowSymLinks +MultiViews
			AllowOverride All
			Require all granted
		</Directory>

		<Location "/status">
			SetHandler server-status
			Require local
			{# TODO Don't hardcode this #}
			Require host gothick.plus.com
		</Location>

		DocumentRoot {{ site.docroot }}

		<Directory {{ site.docroot }}>
			Options {{ site.directory_options | default('FollowSymLinks') }}
			AllowOverride {{ site.allow_override | default('None') }}
			Require all granted

			# CORS, mostly for CDN on gothick.org.uk
			<IfModule mod_headers.c>
			SetEnvIf Origin "^https?://{{ site.server_name }}$" ORIGIN=$0
			{% if site.server_aliases is defined %}
			SetEnvIf Origin "^https?://{{ site.aliases | join('|') }})$" ORIGIN=$0
			{% endif %}
			Header set Access-Control-Allow-Origin %{ORIGIN}e env=ORIGIN
			Header merge Vary Origin
			</IfModule>

			{% if site.php_fpm_pool is defined %}
			<IfModule proxy_module>
				<FilesMatch "\.php$">
					SetHandler "proxy:unix:{{ site.php_fpm_pool }}|fcgi://127.0.0.1:9000"
				</FilesMatch>
			</IfModule>
			{% endif %}

			{% if site.compresstypes is defined %}
			<IfModule mod_deflate.c>
				<IfModule mod_filter.c>
					{% for compresstype in site.compresstypes %}
						AddOutputFilterByType DEFLATE {{ compresstype }}
					{% endfor %}
				</IfModule>
			</IfModule>
			{% endif %}

		</Directory>

		<Directory />
    		Options FollowSymLinks
    		AllowOverride None
  		</Directory>

		{% if site.php_fpm_pool is defined %}
		<IfModule proxy_module>
			{# TODO: Test this. May need setting up in pool https://www.php.net/manual/en/install.fpm.configuration.php#pm.status-path #}
			<LocationMatch "/fpm-status">
				Require local
				Require host {{ safe_admin_host }}
				ProxyPass "unix:{{ site.php_fpm_pool }}|fcgi://localhost/fpm-status"
			</LocationMatch>
		</IfModule>
		{% endif %}

		# Available loglevels: trace8, ..., trace1, debug, info, notice, warn,
		# error, crit, alert, emerg.
		# It is also possible to configure the loglevel for particular
		# modules, e.g.
		LogLevel info ssl:warn
  		ErrorLog {{ apache_log_dir }}/{{ site.server_name }}-https-error.log
  		CustomLog {{ apache_log_dir }}/{{ site.server_name }}-https-access.log combined

		# For most configuration files from conf-available/, which are
		# enabled or disabled at a global level, it is possible to
		# include a line for only one particular virtual host. For example the
		# following line enables the CGI configuration for this host only
		# after it has been globally disabled with "a2disconf".
		#Include conf-available/serve-cgi-bin.conf

		#   SSL Engine Switch:
		#   Enable/Disable SSL for this virtual host.
		SSLEngine on

		#   A self-signed (snakeoil) certificate can be created by installing
		#   the ssl-cert package. See
		#   /usr/share/doc/apache2/README.Debian.gz for more info.
		#   If both key and certificate are stored in the same file, only the
		#   SSLCertificateFile directive is needed.
		SSLCertificateFile	{{ acme_certs_dir }}/{{ site.server_name }}.crt
		SSLCertificateKeyFile {{ acme_keys_dir }}/{{ site.server_name }}.key

		#   Server Certificate Chain:
		#   Point SSLCertificateChainFile at a file containing the
		#   concatenation of PEM encoded CA certificates which form the
		#   certificate chain for the server certificate. Alternatively
		#   the referenced file can be the same as SSLCertificateFile
		#   when the CA certificates are directly appended to the server
		#   certificate for convinience.
		#SSLCertificateChainFile /etc/apache2/ssl.crt/server-ca.crt

		#   Certificate Authority (CA):
		#   Set the CA certificate verification path where to find CA
		#   certificates for client authentication or alternatively one
		#   huge file containing all of them (file must be PEM encoded)
		#   Note: Inside SSLCACertificatePath you need hash symlinks
		#		 to point to the certificate files. Use the provided
		#		 Makefile to update the hash symlinks after changes.
		#SSLCACertificatePath /etc/ssl/certs/
		#SSLCACertificateFile /etc/apache2/ssl.crt/ca-bundle.crt

		#   Certificate Revocation Lists (CRL):
		#   Set the CA revocation path where to find CA CRLs for client
		#   authentication or alternatively one huge file containing all
		#   of them (file must be PEM encoded)
		#   Note: Inside SSLCARevocationPath you need hash symlinks
		#		 to point to the certificate files. Use the provided
		#		 Makefile to update the hash symlinks after changes.
		#SSLCARevocationPath /etc/apache2/ssl.crl/
		#SSLCARevocationFile /etc/apache2/ssl.crl/ca-bundle.crl

		#   Client Authentication (Type):
		#   Client certificate verification type and depth.  Types are
		#   none, optional, require and optional_no_ca.  Depth is a
		#   number which specifies how deeply to verify the certificate
		#   issuer chain before deciding the certificate is not valid.
		#SSLVerifyClient require
		#SSLVerifyDepth  10

		#   SSL Engine Options:
		#   Set various options for the SSL engine.
		#   o FakeBasicAuth:
		#	 Translate the client X.509 into a Basic Authorisation.  This means that
		#	 the standard Auth/DBMAuth methods can be used for access control.  The
		#	 user name is the `one line' version of the client's X.509 certificate.
		#	 Note that no password is obtained from the user. Every entry in the user
		#	 file needs this password: `xxj31ZMTZzkVA'.
		#   o ExportCertData:
		#	 This exports two additional environment variables: SSL_CLIENT_CERT and
		#	 SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
		#	 server (always existing) and the client (only existing when client
		#	 authentication is used). This can be used to import the certificates
		#	 into CGI scripts.
		#   o StdEnvVars:
		#	 This exports the standard SSL/TLS related `SSL_*' environment variables.
		#	 Per default this exportation is switched off for performance reasons,
		#	 because the extraction step is an expensive operation and is usually
		#	 useless for serving static content. So one usually enables the
		#	 exportation for CGI and SSI requests only.
		#   o OptRenegotiate:
		#	 This enables optimized SSL connection renegotiation handling when SSL
		#	 directives are used in per-directory context.
		#SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire
		<FilesMatch "\.(cgi|shtml|phtml|php)$">
				SSLOptions +StdEnvVars
		</FilesMatch>
		<Directory /usr/lib/cgi-bin>
				SSLOptions +StdEnvVars
		</Directory>

		#   SSL Protocol Adjustments:
		#   The safe and default but still SSL/TLS standard compliant shutdown
		#   approach is that mod_ssl sends the close notify alert but doesn't wait for
		#   the close notify alert from client. When you need a different shutdown
		#   approach you can use one of the following variables:
		#   o ssl-unclean-shutdown:
		#	 This forces an unclean shutdown when the connection is closed, i.e. no
		#	 SSL close notify alert is send or allowed to received.  This violates
		#	 the SSL/TLS standard but is needed for some brain-dead browsers. Use
		#	 this when you receive I/O errors because of the standard approach where
		#	 mod_ssl sends the close notify alert.
		#   o ssl-accurate-shutdown:
		#	 This forces an accurate shutdown when the connection is closed, i.e. a
		#	 SSL close notify alert is send and mod_ssl waits for the close notify
		#	 alert of the client. This is 100% SSL/TLS standard compliant, but in
		#	 practice often causes hanging connections with brain-dead browsers. Use
		#	 this only for browsers where you know that their SSL implementation
		#	 works correctly.
		#   Notice: Most problems of broken clients are also related to the HTTP
		#   keep-alive facility, so you usually additionally want to disable
		#   keep-alive for those clients, too. Use variable "nokeepalive" for this.
		#   Similarly, one has to force some clients to use HTTP/1.0 to workaround
		#   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
		#   "force-response-1.0" for this.
		# BrowserMatch "MSIE [2-6]" \
		#		nokeepalive ssl-unclean-shutdown \
		#		downgrade-1.0 force-response-1.0

		# Redirect e.g. http://www.meditationchimer.com (an alias) to https://meditationchimer.com
		{# TODO: We might want to protect this from open redirect by using the
		   same approach of checking the host header as we do in the HTTP version
		   of the site. #}
		{% if site.canonical_rewrite %}
		RewriteEngine On
		# Canonical host, {{ site.server_name }}
		RewriteCond %{HTTP_HOST}   !^{{ site.server_name }} [NC]
		RewriteCond %{HTTP_HOST}   !^$
		RewriteRule ^/(.*)$        https://{{ site.server_name }}/$1 [L,R=301]
		{% endif %}

		# Generally useful
		RewriteEngine On
		RewriteCond {{ site.docroot }}/system/maintenance.html -f
		RewriteCond %{SCRIPT_FILENAME} !maintenance.html
		RewriteRule ^.*$ /system/maintenance.html [L,R=503]

		{% if site.enable_pagespeed | default(false) %}
		<IfModule pagespeed_module>
			ModPagespeedEnableFilters prioritize_critical_css
			# TODO If we enable this, our basic gothick.org.uk page dies with a JavaScript error
			# ModPagespeedEnableFilters defer_javascript
			ModPagespeedEnableFilters sprite_images
			ModPagespeedEnableFilters rewrite_images
			ModPagespeedEnableFilters recompress_png
			ModPagespeedEnableFilters convert_png_to_jpeg,convert_jpeg_to_webp
			ModPagespeedEnableFilters collapse_whitespace,remove_comments

			<Location /mod_pagespeed_statistics>
				<IfModule mod_rewrite.c>
					RewriteEngine Off
				</IfModule>
				Require host {{ safe_admin_host }}
				SetHandler mod_pagespeed_statistics
			</Location>
		</IfModule>
		{% else %}
		<IfModule pagespeed_module>
			ModPagespeed off
		</IfModule>
		{% endif %}

	</VirtualHost>
</IfModule>
