---
- name: Install a webdav server
  hosts: all
  become: true

  vars_files:
    - vault.yml
    - vars.yml
    - webdav_config.yml

  pre_tasks:

  tasks:

    - name: Create config directory
      ansible.builtin.file:
        path: "{{ webdav_conf_dir }}"
        owner: "{{ default_apache_user }}"
        group: "{{ default_apache_group }}"
        state: directory
        mode: '0755'

    - name: Template digest file
      ansible.builtin.template:
        src: webdav_digest.j2
        dest: "{{ webdav_digest_file }}"
        owner: "{{ default_apache_user }}"
        group: "{{ default_apache_group }}"
        mode: '0600' # They're encrypted, but they're still passwords

    - name: Create webdav folders
      ansible.builtin.file:
        path: "{{ webdav_dir }}/{{ item }}"
        state: directory
        owner: "{{ default_apache_user }}"
        group: "{{ default_apache_group }}"
        mode: '0775'
      loop: "{{ webdav_config.folders }}"

    - name: Create folder for well-known/acme-challenge area
      ansible.builtin.file:
        path: "{{ well_known_docroot }}/.well-known/acme-challenge"
        state: directory
        owner: "{{ default_apache_user }}"
        group: "{{ default_apache_group }}"
        mode: '0755'

    - name: Template http version of the config file
      ansible.builtin.template:
        src: webdav-http.conf.j2
        dest: "{{ apache_server_root }}/sites-available/{{ webdav_server_name }}.conf"
        owner: "{{ default_apache_user }}"
        group: "{{ default_apache_group }}"
        mode: '0644'
      notify: Reload apache

    - name: Template https version of the config file
      ansible.builtin.template:
        src: webdav-https.conf.j2
        dest: "{{ apache_server_root }}/sites-available/{{ webdav_server_name }}-ssl.conf"
        owner: "{{ default_apache_user }}"
        group: "{{ default_apache_group }}"
        mode: '0644'
      notify: Reload apache

    - name: Enable http site
      ansible.builtin.command: "a2ensite {{ webdav_server_name }}"
      register: site_result
      notify: Reload apache
      changed_when: "'Enabling site' in site_result.stdout"

    - name: Enable https site
      ansible.builtin.command: "a2ensite {{ webdav_server_name }}-ssl"
      register: site_result
      notify: Reload apache
      changed_when: "'Enabling site' in site_result.stdout"

    # At this point we should be able to have our site well enough up to be able to serve an
    # ACME challenge response, so let's reload Apache if necessary to pick up the new config.
    - name: Flush handlers
      ansible.builtin.meta: flush_handlers

    - name: Set up Certbot
      ansible.builtin.import_role:
        name: geerlingguy.certbot
      vars:
        certbot_certs: "{{ certs }}"
        certbot_install_method: snap
        certbot_create_method: webroot
        certbot_create_if_missing: true
        certbot_agree_tos: true
        certbot_auto_renew_hour: "{{ acme_auto_renew_hour }}"
        certbot_auto_renew_minute: "{{ acme_auto_renew_minute }}"
        # NB: certbot_create_extra_args can't be empty with our current role version;
        # see https://github.com/geerlingguy/ansible-role-certbot/issues/225
        certbot_create_extra_args: ''
        # certbot_testmode enables --test-cert, which uses the staging server.
        certbot_testmode: "{{ acme_use_staging_server }}"
        certbot_email: "{{ acme_email }}"
        # TODO: Can/should we do this as some other user? Not sure. What permissions would it need?
        certbot_auto_renew_user: "{{ acme_auto_renew_user }}"
      # Because there's no point in doing this for e.g. vagrant, where letsencrypt won't
      # be able to see our sites anyway, so we need a mechanism for not bothering.
      when: use_letsencrypt
      # Make sure we reload the config, as the switch from snakeoil to letsencrypt is done
      # by IfFile checks in the apache config, so we need to reload to pick up the change.
      notify: Reload apache
      tags: acme

  handlers:

    - name: Reload apache
      ansible.builtin.service:
        name: apache2
        state: reloaded
